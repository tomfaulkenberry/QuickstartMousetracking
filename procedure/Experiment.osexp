---
API: 2
OpenSesame: 3.0.7b1
Platform: posix
---
set width 1680
set uniform_coordinates no
set transparent_variables no
set title "MouseTrack True or False"
set synth_backend legacy
set subject_parity even
set subject_nr 0
set start experiment
set sampler_backend legacy
set mouse_backend legacy
set keyboard_backend legacy
set height 1050
set foreground black
set font_size 24
set font_italic no
set font_family mono
set font_bold no
set experiment_path "/home/mathcog/Desktop/mousetrackingOperatorPreviewEffect/procedure"
set description "A simple template for the mouse-tracking paradigm"
set custom_cursor no
set coordinates relative
set compensation 0
set color_backend legacy
set clock_backend legacy
set canvas_backend legacy
set bidi no
set background white

define sequence experiment
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run setup_script always
	run trial_loop always

define logger logger
	set use_quotes yes
	set ignore_missing yes
	set description "Logs experimental data"
	set auto_log no
	log height
	log subject_nr
	log width
	log response
	log accuracy
	log rt
	log xTrajectory
	log yTrajectory
	log tTrajectory
	log count_trial_sequence
	log truth
	log stimulus

define inline_script question_script
	set description "Executes Python code"
	___run__
	# Draw start Button and response buttons
	my_canvas.clear()
	my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
	my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
	my_canvas.rect(x=mx-0.5*start_w,y=2*my-start_h,w=start_w,h=start_h,fill=True)  # start button
	my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
	my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
	my_canvas.text("Start",x=mx,y=2*my-0.5*start_h,color='white')
	my_canvas.show()
	
	my_mouse.show_cursor(show=True)
	
	#Wait for click on start button
	while 1:
		button, position, timestamp = my_mouse.get_click()
		x, y = position
		if x > mx-0.5*start_w and x < mx+0.5*start_w and y > (2*my) - start_h:
			my_canvas.clear()
			break
	
	# Hide the mouse
	my_mouse.show_cursor(show=False)
	# Fixation
	tick = fixation_length / 3
	my_canvas.clear()
	my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
	my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
	my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
	my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
	my_canvas.show()
	exp.sleep(tick)
	my_canvas.text('+')
	my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
	my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
	my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
	my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
	my_canvas.show()
	exp.sleep(tick)
	my_canvas.clear()
	my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
	my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
	my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
	my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
	my_canvas.show()
	exp.sleep(tick)
	
	
	
	# Show the stimuli
	
	if SOAcondition=='neutral':
		my_canvas.clear()
		my_canvas.image(exp.get_file('stimuli/{0}'.format(stimulus)),True)
		my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
		my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
		my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.show()
		# Show the mouse, and move it to the starting point
		my_mouse.show_cursor(show=True)
		my_mouse.set_pos(pos=(mx, (2*my)-half_start_h))
	
	elif SOAcondition=='negative' and operation=='add':
		my_canvas.clear()
		my_canvas.image(exp.get_file('stimuli/addPreview.jpg'),True)
		my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
		my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
		my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.show()
		exp.sleep(150)
		my_canvas.clear()
		my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
		my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
		my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.image(exp.get_file('stimuli/{0}'.format(stimulus)),True)
		
		my_canvas.show()
		# Show the mouse, and move it to the starting point
		my_mouse.show_cursor(show=True)
		my_mouse.set_pos(pos=(mx, (2*my)-half_start_h))
	
	elif SOAcondition=='negative' and operation=='mult':
		my_canvas.clear()
		my_canvas.image(exp.get_file('stimuli/multPreview.jpg'),True)
		my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
		my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
		my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.show()
		exp.sleep(150)
		my_canvas.clear()
		my_canvas.image(exp.get_file('stimuli/{0}'.format(stimulus)),True)
		my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
		my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
		my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.show()
		# Show the mouse, and move it to the starting point
		my_mouse.show_cursor(show=True)
		my_mouse.set_pos(pos=(mx, (2*my)-half_start_h))
	
	
	# The actual mouse tracking
	t0 = start = exp.time()
	t1 = t0 + sample_rate
	resp = 0
	timed_out = False
	slow_start = False
	while 1:
		position, timestamp = my_mouse.get_pos()
		if my_mouse.get_pressed()[0]: # A click
			if x < response_w and y < response_h:
				# Clicked response 1
				rt = timestamp - start
				resp = 1
				print 'response 1'
				break
			elif x > (2*mx) - response_w and y < response_h:
				# Clicked response 2
				rt = timestamp - start
				resp = 2
				print 'response 2'
				break
		if timestamp > t1:
			# It's time to record the mouse position
			t1 += sample_rate
			t = timestamp - start
			x, y = position
			xList.append(x)
			yList.append(y)
			tList.append(t)
			if t > max_response_time:
				# Out of time, record a null response.
				timed_out = True
				resp = -1
				rt = None
				print 'Timeout'
				break
	
	# Let's figure out if the response was correct
	if truth == 'true':
		correct_response = 1
	else:
		correct_response = 2
	accuracy = int(resp == correct_response)
	
	
	# Show a message if wrong answer (optional)
	if (accuracy == 0 and not timed_out):
		my_canvas.clear()
		my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
		my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
		my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text('X',color="red")
		my_canvas.show()
		exp.sleep(1000)
	
	# Show a message if the trial has timed out without a response
	if timed_out:
		my_canvas.clear()
		my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
		my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
		my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text(timeout_message)
		my_canvas.show()
		timed_out = False
		my_keyboard.get_key()
	
	# Figure out if the mouse had left the start button by max_init_time
	for i in range(len(yList)):
		y = yList[i]
		if y < ((2*my) - (2*half_start_h)):
			init_step = i # The sample where y left the button
			break
	init_time = tList[init_step] # 	The time of that sample
	slow_start = int(init_time > max_init_time)
	
	
	
	# Show a message if the trial has timed out without a response
	if (slow_start and not timed_out):
		my_canvas.clear()
		my_canvas.text(slow_start_message)
		my_canvas.rect(x=0,y=0,w=response_w,h=response_h,fill=True)  # left response button
		my_canvas.rect(x=2*mx-response_w,y=0,w=response_w,h=response_h,fill=True)  # right response button
		my_canvas.text("True",x=0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.text("False",x=2*mx-0.5*response_w,y=0.5*response_h,color='white')
		my_canvas.show()
		timed_out = False
		my_keyboard.get_key()
	
	
	# Standard Logging (the probe and code variables are taken care of automatically)
	self.experiment.set("response", resp)
	self.experiment.set("accuracy", accuracy)
	self.experiment.set("rt", rt)
	self.experiment.set("xTrajectory", str(xList))
	self.experiment.set("yTrajectory", str(yList))
	self.experiment.set("tTrajectory", str(tList))
	__end__
	___prepare__
	# Constants
	max_response_time = 3000
	fixation_length = 900
	error_message_duration = 2000
	max_init_time = 800
	sample_rate = 30
	
	# Images
	start_button = exp.get_file('materials/start.png')
	yes_button = exp.get_file('materials/yes.png')
	no_button = exp.get_file('materials/no.png')
	
	# Text
	timeout_message = "Too slow!\n\
	Try to respond more quickly.\n\
	Press any key to continue."
	slow_start_message = "\
	Please try to move the mouse as soon\n\
	as you see the target, even if you're not\n\
	sure of your response yet\n\
	Press any key to continue."
	error_message = "<span color='red'>X</span>"
	
	# Turn our OpenSesame variables into plain Python ones
	stimulus = exp.get('stimulus')
	truth = exp.get('truth')
	SOAcondition = exp.get('SOAcondition')
	operation = exp.get('operation')
	
	# Some dimensions
	# Our start button is 80x80 pixels.
	# Change these values if using a different sized image.
	start_w=192
	start_h=80
	
	half_start_w = 40
	half_start_h = 40
	# Likewise for the response buttons
	response_w = 192
	response_h = 128
	# Get the size of the screen
	mx = my_canvas.xcenter()
	my = my_canvas.ycenter()
	
	# Some empty lists for recording mouse data
	xList, yList, tList = [], [], []
	__end__

define inline_script setup_script
	set description "Executes Python code"
	___run__
	# Create our input and output routines
	from openexp.mouse import mouse
	from openexp.keyboard import keyboard
	from openexp.canvas import canvas
	my_mouse = mouse(exp, visible=True)
	my_keyboard = keyboard(exp)
	my_canvas = canvas(exp)
	# Declare them as global, so we can use them later on.
	global my_mouse, my_keyboard, my_canvas
	__end__
	set _prepare ""

define loop trial_loop
	set skip 0
	set repeat 1
	set order random
	set offset no
	set item trial_sequence
	set description "Repeatedly runs another item"
	set cycles 14
	set column_order "stimulus;truth;weight;SOAcondition;operation"
	set break_if never
	setcycle 0 stimulus "2_7_add_FI.jpg"
	setcycle 0 SOAcondition "neutral"
	setcycle 0 truth "false"
	setcycle 0 operation "add"
	setcycle 0 weight "1"
	setcycle 1 stimulus "2_7_add_FNI.jpg"
	setcycle 1 SOAcondition "neutral"
	setcycle 1 truth "false"
	setcycle 1 operation "add"
	setcycle 1 weight "1"
	setcycle 2 stimulus "2_7_add_true.jpg"
	setcycle 2 SOAcondition "neutral"
	setcycle 2 truth "true"
	setcycle 2 operation "add"
	setcycle 2 weight "2"
	setcycle 3 stimulus "2_7_add_true.jpg"
	setcycle 3 SOAcondition "neutral"
	setcycle 3 truth "true"
	setcycle 3 operation "add"
	setcycle 3 weight "2"
	setcycle 4 stimulus "2_7_add_true.jpg"
	setcycle 4 SOAcondition "neutral"
	setcycle 4 truth "true"
	setcycle 4 operation "add"
	setcycle 4 weight "2"
	setcycle 5 stimulus "2_7_add_true.jpg"
	setcycle 5 SOAcondition "neutral"
	setcycle 5 truth "true"
	setcycle 5 operation "add"
	setcycle 5 weight "2"
	setcycle 6 stimulus "2_7_mult_FI.jpg"
	setcycle 6 SOAcondition "neutral"
	setcycle 6 truth "false"
	setcycle 6 operation "mult"
	setcycle 6 weight "1"
	setcycle 7 stimulus "2_7_mult_FNI.jpg"
	setcycle 7 SOAcondition "negative"
	setcycle 7 truth "false"
	setcycle 7 operation "mult"
	setcycle 7 weight "1"
	setcycle 8 stimulus "2_7_mult_true.jpg"
	setcycle 8 SOAcondition "negative"
	setcycle 8 truth "true"
	setcycle 8 operation "mult"
	setcycle 8 weight "2"
	setcycle 9 stimulus "2_7_mult_true.jpg"
	setcycle 9 SOAcondition "negative"
	setcycle 9 truth "true"
	setcycle 9 operation "mult"
	setcycle 9 weight "2"
	setcycle 10 stimulus "2_7_mult_true.jpg"
	setcycle 10 SOAcondition "negative"
	setcycle 10 truth "true"
	setcycle 10 operation "mult"
	setcycle 10 weight "2"
	setcycle 11 stimulus "2_7_mult_true.jpg"
	setcycle 11 SOAcondition "negative"
	setcycle 11 truth "true"
	setcycle 11 operation "mult"
	setcycle 11 weight "2"
	setcycle 12 stimulus "3_6_add_FI.jpg"
	setcycle 12 SOAcondition "negative"
	setcycle 12 truth "false"
	setcycle 12 operation "add"
	setcycle 12 weight "1"
	setcycle 13 stimulus "3_6_add_FNI.jpg"
	setcycle 13 SOAcondition "negative"
	setcycle 13 truth "false"
	setcycle 13 operation "add"
	setcycle 13 weight "1"
	run trial_sequence

define sequence trial_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run question_script always
	run logger always

